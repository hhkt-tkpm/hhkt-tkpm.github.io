"use strict";(self.webpackChunkhhkt_docs_tkpm=self.webpackChunkhhkt_docs_tkpm||[]).push([[9],{731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"developer-guide/unit-testing","title":"Testing Framework","description":"A comprehensive testing framework for the Student Management System Spring Boot application, focusing on controller integration tests that validate REST API behavior and ensure proper enforcement of API contracts and validation rules.","source":"@site/docs/developer-guide/unit-testing.md","sourceDirName":"developer-guide","slug":"/developer-guide/unit-testing","permalink":"/docs/developer-guide/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/hhkt-tkpm/hhkt-tkpm.github.io/tree/main/docs/developer-guide/unit-testing.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Data Validation","permalink":"/docs/developer-guide/data-validation"},"next":{"title":"API Documentation","permalink":"/docs/developer-guide/webapi-documentation"}}');var i=t(4848),r=t(8453);const l={sidebar_position:10},o="Testing Framework",a={},d=[{value:"\ud83c\udfaf Purpose and Scope",id:"-purpose-and-scope",level:2},{value:"\ud83c\udfd7\ufe0f Testing Architecture",id:"\ufe0f-testing-architecture",level:2},{value:"Spring Test Framework Components",id:"spring-test-framework-components",level:3},{value:"Test Flow Architecture",id:"test-flow-architecture",level:3},{value:"Validation Testing Flow",id:"validation-testing-flow",level:3},{value:"\ud83e\uddea Controller Test Implementation",id:"-controller-test-implementation",level:2},{value:"Test Class Structure",id:"test-class-structure",level:3},{value:"Test Method Naming Convention",id:"test-method-naming-convention",level:3},{value:"Example Test Class Structure",id:"example-test-class-structure",level:3},{value:"\ud83c\udfad Service Layer Mocking Strategy",id:"-service-layer-mocking-strategy",level:2},{value:"Mock Configuration",id:"mock-configuration",level:3},{value:"Mock Behavior Setup",id:"mock-behavior-setup",level:3},{value:"\u2705 Request/Response Testing Pattern",id:"-requestresponse-testing-pattern",level:2},{value:"HTTP Status and JSON Response Validation",id:"http-status-and-json-response-validation",level:3},{value:"Common Assertion Patterns",id:"common-assertion-patterns",level:3},{value:"\ud83d\udee1\ufe0f Validation Testing",id:"\ufe0f-validation-testing",level:2},{value:"Input Validation Tests",id:"input-validation-tests",level:3},{value:"Validation Test Example",id:"validation-test-example",level:3},{value:"\ud83d\udcdd Test Data and Response Builders",id:"-test-data-and-response-builders",level:2},{value:"Response DTO Construction",id:"response-dto-construction",level:3},{value:"JSON Request Payloads",id:"json-request-payloads",level:3},{value:"\u2699\ufe0f Test Configuration Annotations",id:"\ufe0f-test-configuration-annotations",level:2},{value:"JPA Metamodel Handling",id:"jpa-metamodel-handling",level:3},{value:"Web Layer Isolation",id:"web-layer-isolation",level:3},{value:"\ud83d\ude80 Running Tests",id:"-running-tests",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Execute Tests",id:"execute-tests",level:3},{value:"Test Categories",id:"test-categories",level:3},{value:"\ud83d\udcca Test Coverage",id:"-test-coverage",level:2},{value:"\ud83e\udd1d Contributing",id:"-contributing",level:2},{value:"\ud83d\udcc4 File Structure",id:"-file-structure",level:2}];function c(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-framework",children:"Testing Framework"})}),"\n",(0,i.jsx)(n.p,{children:"A comprehensive testing framework for the Student Management System Spring Boot application, focusing on controller integration tests that validate REST API behavior and ensure proper enforcement of API contracts and validation rules."}),"\n",(0,i.jsx)(n.h2,{id:"-purpose-and-scope",children:"\ud83c\udfaf Purpose and Scope"}),"\n",(0,i.jsx)(n.p,{children:"This testing framework implements backend testing for the Spring Boot application with emphasis on:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Web layer integration testing"})," with isolated controller validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"REST API behavior verification"})," through comprehensive test coverage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service layer mocking"})," to ensure clean separation of concerns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input validation testing"})," to verify data integrity rules"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For information about the actual REST API controllers being tested, see ",(0,i.jsx)(n.strong,{children:"REST API Layer"}),".",(0,i.jsx)(n.br,{}),"\n","For details about the service layer implementations that are mocked in these tests, see ",(0,i.jsx)(n.strong,{children:"Core Business Services"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-testing-architecture",children:"\ud83c\udfd7\ufe0f Testing Architecture"}),"\n",(0,i.jsx)(n.p,{children:"The backend employs Spring Boot's testing framework with a focus on web layer integration testing. The architecture isolates the controller layer for testing while mocking all service dependencies."}),"\n",(0,i.jsx)(n.h3,{id:"spring-test-framework-components",children:"Spring Test Framework Components"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:t(5485).A+"",width:"1076",height:"800"})}),"\n",(0,i.jsx)(n.h3,{id:"test-flow-architecture",children:"Test Flow Architecture"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:t(4691).A+"",width:"1303",height:"810"})}),"\n",(0,i.jsx)(n.h3,{id:"validation-testing-flow",children:"Validation Testing Flow"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:t(5665).A+"",width:"1253",height:"239"})}),"\n",(0,i.jsx)(n.h2,{id:"-controller-test-implementation",children:"\ud83e\uddea Controller Test Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"test-class-structure",children:"Test Class Structure"}),"\n",(0,i.jsx)(n.p,{children:"All controller tests follow a consistent structure using Spring Boot's web layer testing capabilities:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Purpose"}),(0,i.jsx)(n.th,{children:"Implementation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"@WebMvcTest"})}),(0,i.jsx)(n.td,{children:"Configures Spring MVC test context"}),(0,i.jsx)(n.td,{children:"Targets specific controller class"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"MockMvc"})}),(0,i.jsx)(n.td,{children:"HTTP request testing client"}),(0,i.jsxs)(n.td,{children:["Injected via ",(0,i.jsx)(n.code,{children:"@Autowired"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"@MockBean"})}),(0,i.jsx)(n.td,{children:"Service layer mocking"}),(0,i.jsx)(n.td,{children:"Mocks service implementations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"@AutoConfigureDataJpa"})}),(0,i.jsx)(n.td,{children:"JPA configuration for data-dependent tests"}),(0,i.jsx)(n.td,{children:"Used in EmailDomainControllerTest"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"test-method-naming-convention",children:"Test Method Naming Convention"}),"\n",(0,i.jsx)(n.p,{children:"The test classes implement comprehensive CRUD operation testing with consistent naming:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"shouldGetAll{Entity}()"})," - Tests GET collection endpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"shouldGet{Entity}ById()"})," - Tests GET single resource endpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"shouldAdd{Entity}()"})," - Tests POST creation endpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"shouldUpdate{Entity}()"})," - Tests PUT update endpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"shouldDelete{Entity}()"})," - Tests DELETE endpoints"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-test-class-structure",children:"Example Test Class Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@WebMvcTest(EmailDomainController.class)\n@MockBean(JpaMetamodelMappingContext.class)\nclass EmailDomainControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private EmailDomainServiceImpl service;\n\n    @Test\n    void shouldGetAllEmailDomains() throws Exception {\n        // Test implementation\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-service-layer-mocking-strategy",children:"\ud83c\udfad Service Layer Mocking Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"mock-configuration",children:"Mock Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Each test class mocks its corresponding service implementation using ",(0,i.jsx)(n.code,{children:"@MockBean"}),":"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Controller"}),(0,i.jsx)(n.th,{children:"Mocked Service"}),(0,i.jsx)(n.th,{children:"Mock Bean Declaration"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"EmailDomainController"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"EmailDomainServiceImpl"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"@MockBean EmailDomainServiceImpl service"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FacultyController"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FacultyServiceImpl"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"@MockBean FacultyServiceImpl facultyService"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ProgramController"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ProgramServiceImpl"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"@MockBean ProgramServiceImpl programService"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"StudentStatusController"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"StudentStatusServiceImpl"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"@MockBean StudentStatusServiceImpl studentStatusService"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"mock-behavior-setup",children:"Mock Behavior Setup"}),"\n",(0,i.jsxs)(n.p,{children:["Tests use Mockito's ",(0,i.jsx)(n.code,{children:"when().thenReturn()"})," pattern to define expected service behavior:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Mock collection retrieval\nwhen(service.getAllDomains()).thenReturn(emailDomains);\n\n// Mock single entity retrieval\nwhen(service.getDomainById(1)).thenReturn(emailDomain);\n\n// Mock creation with argument matchers\nwhen(service.createDomain(any(EmailDomainRequest.class))).thenReturn(emailDomain);\n\n// Mock updates with specific ID matching\nwhen(service.updateDomain(eq(1), any(EmailDomainRequest.class))).thenReturn(emailDomain);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-requestresponse-testing-pattern",children:"\u2705 Request/Response Testing Pattern"}),"\n",(0,i.jsx)(n.h3,{id:"http-status-and-json-response-validation",children:"HTTP Status and JSON Response Validation"}),"\n",(0,i.jsx)(n.p,{children:"The tests validate both HTTP status codes and JSON response structure using Spring's MockMvc assertions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'mockMvc.perform(get("/api/email-domains"))\n    .andExpect(status().isOk())\n    .andExpect(jsonPath("$.status").value(HttpStatus.OK.value()))\n    .andExpect(jsonPath("$.data.length()").value(expectedCount))\n    .andExpect(jsonPath("$.data[0].domain").value("example.com"));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"common-assertion-patterns",children:"Common Assertion Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'.andExpect(jsonPath("$.status").value(HttpStatus.OK.value()))'})," - Status validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'.andExpect(jsonPath("$.data.length()").value(expectedCount))'})," - Collection size validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'.andExpect(jsonPath("$.data.fieldName").value("expectedValue"))'})," - Field value validation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-validation-testing",children:"\ud83d\udee1\ufe0f Validation Testing"}),"\n",(0,i.jsx)(n.h3,{id:"input-validation-tests",children:"Input Validation Tests"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"EmailDomainControllerTest"})," includes comprehensive validation testing for domain format requirements:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Test Method"}),(0,i.jsx)(n.th,{children:"Validation Rule"}),(0,i.jsx)(n.th,{children:"Expected Behavior"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"shouldRejectDomainWithoutTLD()"})}),(0,i.jsx)(n.td,{children:"Domain must have TLD"}),(0,i.jsxs)(n.td,{children:["Returns ",(0,i.jsx)(n.code,{children:"400 Bad Request"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"shouldRejectDomainStartingWithHyphen()"})}),(0,i.jsx)(n.td,{children:"Domain cannot start with hyphen"}),(0,i.jsxs)(n.td,{children:["Returns ",(0,i.jsx)(n.code,{children:"400 Bad Request"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"shouldRejectBlankDomain()"})}),(0,i.jsx)(n.td,{children:"Domain cannot be blank"}),(0,i.jsxs)(n.td,{children:["Returns ",(0,i.jsx)(n.code,{children:"400 Bad Request"})]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"These tests verify that controller-level validation annotations and custom validators properly reject invalid input before reaching the service layer."}),"\n",(0,i.jsx)(n.h3,{id:"validation-test-example",children:"Validation Test Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldRejectDomainWithoutTLD() throws Exception {\n    mockMvc.perform(post("/api/email-domains")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content("{\\"domain\\": \\"invalid-domain\\"}"))\n            .andExpect(status().isBadRequest())\n            .andExpect(jsonPath("$.status").value(HttpStatus.BAD_REQUEST.value()));\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-test-data-and-response-builders",children:"\ud83d\udcdd Test Data and Response Builders"}),"\n",(0,i.jsx)(n.h3,{id:"response-dto-construction",children:"Response DTO Construction"}),"\n",(0,i.jsx)(n.p,{children:"Tests use builder patterns to construct response DTOs for mocking:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// EmailDomain response\nEmailDomainResponse.builder()\n    .id(1)\n    .domain("example.com")\n    .build();\n\n// Faculty response\nFacultyResponse.builder()\n    .id(1)\n    .facultyName("Computer Science")\n    .build();\n\n// Program response\nProgramResponse.builder()\n    .id(1)\n    .programName("Computer Science")\n    .build();\n\n// StudentStatus response\nStudentStatusResponse.builder()\n    .id(1)\n    .studentStatusName("Active")\n    .build();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"json-request-payloads",children:"JSON Request Payloads"}),"\n",(0,i.jsx)(n.p,{children:"HTTP requests use inline JSON strings for request bodies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// EmailDomain creation/update\n"{\\"domain\\": \\"example.com\\"}"\n\n// Faculty operations\n"{\\"facultyName\\": \\"Computer Science\\"}"\n\n// Program operations\n"{\\"programName\\": \\"Computer Science\\"}"\n\n// StudentStatus operations\n"{\\"studentStatusName\\": \\"Active\\"}"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-test-configuration-annotations",children:"\u2699\ufe0f Test Configuration Annotations"}),"\n",(0,i.jsx)(n.h3,{id:"jpa-metamodel-handling",children:"JPA Metamodel Handling"}),"\n",(0,i.jsxs)(n.p,{children:["Most controller tests include ",(0,i.jsx)(n.code,{children:"@MockBean(JpaMetamodelMappingContext.class)"})," to prevent Spring from attempting to load JPA metamodel during web layer testing, since the service layer is mocked and no actual database operations occur."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"EmailDomainControllerTest"})," uses ",(0,i.jsx)(n.code,{children:"@AutoConfigureDataJpa"})," instead, suggesting it may have some data-dependent validation logic that requires JPA configuration."]}),"\n",(0,i.jsx)(n.h3,{id:"web-layer-isolation",children:"Web Layer Isolation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@WebMvcTest"})," annotation ensures that only web layer components are loaded, providing:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast test execution"})," by avoiding full application context loading"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolation of controller logic"})," from service and repository layers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatic configuration of MockMvc"})," for HTTP testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-running-tests",children:"\ud83d\ude80 Running Tests"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Java 11+"}),"\n",(0,i.jsx)(n.li,{children:"Maven 3.6+"}),"\n",(0,i.jsx)(n.li,{children:"Spring Boot 2.7+"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"execute-tests",children:"Execute Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Run all controller tests\nmvn test -Dtest="*ControllerTest"\n\n# Run specific controller test\nmvn test -Dtest="EmailDomainControllerTest"\n\n# Run with coverage report\nmvn test jacoco:report\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-categories",children:"Test Categories"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Web layer tests only\nmvn test -Dgroups="web-layer"\n\n# Validation tests\nmvn test -Dtest="*ControllerTest" -Dtest.validation=true\n\n# Integration tests\nmvn test -Dtest="*IntegrationTest"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-test-coverage",children:"\ud83d\udcca Test Coverage"}),"\n",(0,i.jsx)(n.p,{children:"The testing framework covers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"HTTP Methods"}),": GET, POST, PUT, DELETE"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Status Codes"}),": 200, 201, 400, 404, 500"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Request Validation"}),": Input format, required fields, constraints"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Response Structure"}),": JSON format, field mapping, status codes"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Error Handling"}),": Validation errors, service exceptions"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"CRUD Operations"}),": Complete lifecycle testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-contributing",children:"\ud83e\udd1d Contributing"}),"\n",(0,i.jsx)(n.p,{children:"When adding new controller tests:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Follow the established naming conventions"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"@WebMvcTest"})," for web layer isolation"]}),"\n",(0,i.jsxs)(n.li,{children:["Mock all service dependencies with ",(0,i.jsx)(n.code,{children:"@MockBean"})]}),"\n",(0,i.jsx)(n.li,{children:"Include comprehensive validation testing"}),"\n",(0,i.jsx)(n.li,{children:"Test all CRUD operations and error scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Maintain consistent assertion patterns"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-file-structure",children:"\ud83d\udcc4 File Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"src/test/java/org/example/backend/controller/\n\u251c\u2500\u2500 EmailDomainControllerTest.java\n\u251c\u2500\u2500 FacultyControllerTest.java\n\u251c\u2500\u2500 ProgramControllerTest.java\n\u251c\u2500\u2500 StudentStatusControllerTest.java\n\u2514\u2500\u2500 [Other controller tests...]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},4691:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/test-flow-architecture-image-b121f60750db92e1a0fa254f853c0a63.png"},5485:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/spring-test-components-image-1e837bbefe29ba2e10eb88ed507670f7.png"},5665:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/validation-testing-flow-image-6ee191c242c006797005b8ae25bcecef.png"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);