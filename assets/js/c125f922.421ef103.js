"use strict";(self.webpackChunkhhkt_docs_tkpm=self.webpackChunkhhkt_docs_tkpm||[]).push([[415],{6116:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"developer-guide/conding-standards","title":"Coding Standards","description":"General Principles","source":"@site/docs/developer-guide/conding-standards.md","sourceDirName":"developer-guide","slug":"/developer-guide/conding-standards","permalink":"/docs/developer-guide/conding-standards","draft":false,"unlisted":false,"editUrl":"https://github.com/hhkt-tkpm/hhkt-tkpm.github.io/tree/main/docs/developer-guide/conding-standards.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Developer Guide","permalink":"/docs/category/developer-guide"},"next":{"title":"Backend Architecture Overview","permalink":"/docs/developer-guide/backend-architecture-overview"}}');var a=s(4848),i=s(8453);const r={sidebar_position:1},d="Coding Standards",l={},o=[{value:"General Principles",id:"general-principles",level:2},{value:"Code Quality Principles",id:"code-quality-principles",level:3},{value:"Project Structure",id:"project-structure",level:3},{value:"Java Backend Standards",id:"java-backend-standards",level:2},{value:"Package Structure",id:"package-structure",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Service Layer Standards",id:"service-layer-standards",level:3},{value:"Controller Standards",id:"controller-standards",level:3},{value:"Exception Handling",id:"exception-handling",level:3},{value:"Database Entity Standards",id:"database-entity-standards",level:3},{value:"TypeScript Frontend Standards",id:"typescript-frontend-standards",level:2},{value:"Project Structure",id:"project-structure-1",level:3},{value:"Naming Conventions",id:"naming-conventions-1",level:3},{value:"Component Standards",id:"component-standards",level:3},{value:"Custom Hooks Standards",id:"custom-hooks-standards",level:3},{value:"Interface Standards",id:"interface-standards",level:3},{value:"Database Standards",id:"database-standards",level:2},{value:"Naming Conventions",id:"naming-conventions-2",level:3},{value:"Migration Standards",id:"migration-standards",level:3},{value:"API Standards",id:"api-standards",level:2},{value:"Endpoint Naming",id:"endpoint-naming",level:3},{value:"Response Format",id:"response-format",level:3},{value:"Error Response Format",id:"error-response-format",level:3},{value:"Testing Standards",id:"testing-standards",level:2},{value:"Unit Test Standards",id:"unit-test-standards",level:3},{value:"Test Naming",id:"test-naming",level:3},{value:"Documentation Standards",id:"documentation-standards",level:2},{value:"Code Comments",id:"code-comments",level:3},{value:"API Documentation",id:"api-documentation",level:3},{value:"README Standards",id:"readme-standards",level:3},{value:"Translation and Internationalization",id:"translation-and-internationalization",level:2},{value:"Translation Helper Standards",id:"translation-helper-standards",level:3},{value:"Translation Service Standards",id:"translation-service-standards",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"coding-standards",children:"Coding Standards"})}),"\n",(0,a.jsx)(n.h2,{id:"general-principles",children:"General Principles"}),"\n",(0,a.jsx)(n.h3,{id:"code-quality-principles",children:"Code Quality Principles"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Broken Window Theory"}),": Fix small issues immediately to prevent larger problems"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Boy Scout Rule"}),": Always leave the code cleaner than you found it"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DRY (Don't Repeat Yourself)"}),": Avoid code duplication"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SOLID Principles"}),": Follow Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clean Code"}),": Write self-documenting, readable code"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Maintain clear separation between client and server codebases"}),"\n",(0,a.jsx)(n.li,{children:"Follow established architectural patterns (MVC for backend, component-based for frontend)"}),"\n",(0,a.jsx)(n.li,{children:"Use consistent folder structure across similar modules"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"java-backend-standards",children:"Java Backend Standards"}),"\n",(0,a.jsx)(n.h3,{id:"package-structure",children:"Package Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"org.example.backend/\n\u251c\u2500\u2500 controller/          # REST controllers\n\u251c\u2500\u2500 service/            # Business logic\n\u2502   \u251c\u2500\u2500 impl/          # Service implementations\n\u2502   \u251c\u2500\u2500 export/        # Export services (PDF, Excel)\n\u2502   \u2514\u2500\u2500 Import/        # Import services\n\u251c\u2500\u2500 repository/         # Data access layer\n\u251c\u2500\u2500 domain/            # Entity classes\n\u251c\u2500\u2500 dto/               # Data Transfer Objects\n\u2502   \u251c\u2500\u2500 request/       # Request DTOs\n\u2502   \u251c\u2500\u2500 response/      # Response DTOs\n\u2502   \u2514\u2500\u2500 data/          # Data DTOs\n\u251c\u2500\u2500 mapper/            # Object mappers\n\u251c\u2500\u2500 config/            # Configuration classes\n\u251c\u2500\u2500 common/            # Common utilities\n\u2514\u2500\u2500 validator/         # Custom validators\n"})}),"\n",(0,a.jsx)(n.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Classes"}),": PascalCase (e.g., ",(0,a.jsx)(n.code,{children:"StudentController"}),", ",(0,a.jsx)(n.code,{children:"TranslationService"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Methods"}),": camelCase (e.g., ",(0,a.jsx)(n.code,{children:"findStudentById"}),", ",(0,a.jsx)(n.code,{children:"validateRequest"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Variables"}),": camelCase (e.g., ",(0,a.jsx)(n.code,{children:"studentId"}),", ",(0,a.jsx)(n.code,{children:"courseCode"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Constants"}),": UPPER_SNAKE_CASE (e.g., ",(0,a.jsx)(n.code,{children:"MAX_STUDENTS"}),", ",(0,a.jsx)(n.code,{children:"DEFAULT_PAGE_SIZE"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Packages"}),": lowercase (e.g., ",(0,a.jsx)(n.code,{children:"controller"}),", ",(0,a.jsx)(n.code,{children:"service.impl"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"service-layer-standards",children:"Service Layer Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Service\n@Slf4j\npublic class StudentServiceImpl implements StudentService {\n    \n    // Use constructor injection\n    private final StudentRepository studentRepository;\n    private final ValidationService validationService;\n    \n    public StudentServiceImpl(StudentRepository studentRepository, \n                             ValidationService validationService) {\n        this.studentRepository = studentRepository;\n        this.validationService = validationService;\n    }\n    \n    // Log important operations\n    @Override\n    public StudentResponse createStudent(CreateStudentRequest request) {\n        log.info("Creating student with email: {}", request.getEmail());\n        // Implementation\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"controller-standards",children:"Controller Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/students")\n@Validated\npublic class StudentController {\n    \n    // Use standard HTTP status codes\n    @PostMapping\n    public ResponseEntity<ApiResponse<StudentResponse>> createStudent(\n            @Valid @RequestBody CreateStudentRequest request) {\n        \n        StudentResponse student = studentService.createStudent(request);\n        return ResponseEntity.status(HttpStatus.CREATED)\n            .body(ApiResponse.success(student));\n    }\n    \n    // Include pagination for list endpoints\n    @GetMapping\n    public ResponseEntity<ApiResponse<PagedResponse<StudentResponse>>> getAllStudents(\n            @RequestParam(defaultValue = "0") int page,\n            @RequestParam(defaultValue = "10") int size) {\n        // Implementation\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@ControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    @ExceptionHandler(ValidationException.class)\n    public ResponseEntity<ApiResponse<Object>> handleValidation(ValidationException ex) {\n        return ResponseEntity.badRequest()\n            .body(ApiResponse.error(ex.getMessage()));\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"database-entity-standards",children:"Database Entity Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "students")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Student {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long studentId;\n    \n    @Column(name = "student_code", unique = true, nullable = false)\n    private String studentCode;\n    \n    // Use proper JPA relationships\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "faculty_id")\n    private Faculty faculty;\n    \n    // Include audit fields\n    @CreationTimestamp\n    private LocalDateTime createdAt;\n    \n    @UpdateTimestamp\n    private LocalDateTime updatedAt;\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"typescript-frontend-standards",children:"TypeScript Frontend Standards"}),"\n",(0,a.jsx)(n.h3,{id:"project-structure-1",children:"Project Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 app/                    # Next.js app directory\n\u2502   \u251c\u2500\u2500 [feature]/         # Feature-based modules\n\u2502   \u2502   \u251c\u2500\u2500 components/    # Feature components\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx      # Page component\n\u251c\u2500\u2500 components/            # Shared components\n\u2502   \u2514\u2500\u2500 ui/               # UI components\n\u251c\u2500\u2500 interfaces/           # TypeScript interfaces\n\u251c\u2500\u2500 libs/                # Utilities and services\n\u2502   \u251c\u2500\u2500 api/             # API clients\n\u2502   \u251c\u2500\u2500 hooks/           # Custom hooks\n\u2502   \u251c\u2500\u2500 services/        # Business services\n\u2502   \u251c\u2500\u2500 stores/          # State management\n\u2502   \u251c\u2500\u2500 utils/           # Utility functions\n\u2502   \u2514\u2500\u2500 validators/      # Form validators\n"})}),"\n",(0,a.jsx)(n.h3,{id:"naming-conventions-1",children:"Naming Conventions"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Components"}),": PascalCase (e.g., ",(0,a.jsx)(n.code,{children:"StudentModal"}),", ",(0,a.jsx)(n.code,{children:"CourseTable"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Files"}),": kebab-case for utilities, PascalCase for components"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Variables/Functions"}),": camelCase (e.g., ",(0,a.jsx)(n.code,{children:"studentData"}),", ",(0,a.jsx)(n.code,{children:"handleSubmit"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Interfaces"}),": PascalCase with descriptive names (e.g., ",(0,a.jsx)(n.code,{children:"StudentResponse"}),", ",(0,a.jsx)(n.code,{children:"CreateCourseRequest"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Constants"}),": UPPER_SNAKE_CASE (e.g., ",(0,a.jsx)(n.code,{children:"API_BASE_URL"}),", ",(0,a.jsx)(n.code,{children:"DEFAULT_PAGE_SIZE"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"component-standards",children:"Component Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// Use functional components with TypeScript\ninterface StudentModalProps {\n    student?: Student;\n    visible: boolean;\n    onClose: () => void;\n    onSubmit: (student: CreateStudentRequest) => void;\n}\n\nexport const StudentModal: React.FC<StudentModalProps> = ({\n    student,\n    visible,\n    onClose,\n    onSubmit\n}) => {\n    const t = useTranslations('student-management');\n    const [form] = Form.useForm();\n    \n    // Use proper effect dependencies\n    useEffect(() => {\n        if (student) {\n            form.setFieldsValue(student);\n        } else {\n            form.resetFields();\n        }\n    }, [student, form]);\n    \n    const handleSubmit = async () => {\n        try {\n            const values = await form.validateFields();\n            onSubmit(values);\n        } catch (error) {\n            console.error('Validation failed:', error);\n        }\n    };\n    \n    return (\n        <Modal\n            title={t(student ? 'edit-student' : 'add-student')}\n            open={visible}\n            onCancel={onClose}\n            onOk={handleSubmit}\n        >\n            {/* Form implementation */}\n        </Modal>\n    );\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-hooks-standards",children:"Custom Hooks Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// Custom hooks should start with 'use'\nexport const useStudents = (params: StudentQueryParams) => {\n    return useQuery({\n        queryKey: ['students', params],\n        queryFn: () => studentApi.getStudents(params),\n        staleTime: 5 * 60 * 1000, // 5 minutes\n    });\n};\n\nexport const useCreateStudent = () => {\n    const queryClient = useQueryClient();\n    \n    return useMutation({\n        mutationFn: studentApi.createStudent,\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: ['students'] });\n            message.success('Student created successfully');\n        },\n        onError: (error) => {\n            message.error(`Failed to create student: ${error.message}`);\n        },\n    });\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"interface-standards",children:"Interface Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// Use descriptive interface names\nexport interface Student {\n    studentId: string;\n    fullName: string;\n    email: string;\n    faculty: string;\n    program: string;\n    studentStatus: string;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface CreateStudentRequest {\n    fullName: string;\n    email: string;\n    facultyId: number;\n    programId: number;\n    // Only include required fields for creation\n}\n\nexport interface StudentResponse extends Student {\n    // Additional fields in response\n    addresses: Address[];\n    documents: Document[];\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"database-standards",children:"Database Standards"}),"\n",(0,a.jsx)(n.h3,{id:"naming-conventions-2",children:"Naming Conventions"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tables"}),": plural, snake_case (e.g., ",(0,a.jsx)(n.code,{children:"students"}),", ",(0,a.jsx)(n.code,{children:"class_registrations"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Columns"}),": snake_case (e.g., ",(0,a.jsx)(n.code,{children:"student_id"}),", ",(0,a.jsx)(n.code,{children:"created_at"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Foreign Keys"}),": ",(0,a.jsx)(n.code,{children:"[referenced_table]_id"})," (e.g., ",(0,a.jsx)(n.code,{children:"faculty_id"}),", ",(0,a.jsx)(n.code,{children:"course_id"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Indexes"}),": ",(0,a.jsx)(n.code,{children:"idx_[table]_[column(s)]"})," (e.g., ",(0,a.jsx)(n.code,{children:"idx_students_email"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"migration-standards",children:"Migration Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- V1_20250319081659_create_table.sql\n-- Use descriptive migration names with timestamps\n\nCREATE TABLE students (\n    student_id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    student_code VARCHAR(20) NOT NULL UNIQUE,\n    full_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    faculty_id BIGINT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    \n    FOREIGN KEY (faculty_id) REFERENCES faculties(faculty_id),\n    INDEX idx_students_email (email),\n    INDEX idx_students_faculty (faculty_id)\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"api-standards",children:"API Standards"}),"\n",(0,a.jsx)(n.h3,{id:"endpoint-naming",children:"Endpoint Naming"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use RESTful conventions"}),"\n",(0,a.jsx)(n.li,{children:"Use plural nouns for resources"}),"\n",(0,a.jsx)(n.li,{children:"Use kebab-case for multi-word resources"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"GET    /api/students              # Get all students\nPOST   /api/students              # Create student\nGET    /api/students/{id}         # Get student by ID\nPUT    /api/students/{id}         # Update student\nDELETE /api/students/{id}         # Delete student\nGET    /api/students/search       # Search students\nGET    /api/class-registrations   # Multi-word resource\n"})}),"\n",(0,a.jsx)(n.h3,{id:"response-format",children:"Response Format"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "status": 200,\n    "message": "Success",\n    "data": {\n        // Response data\n    },\n    "paginationInfo": {\n        "page": 0,\n        "size": 10,\n        "totalElements": 100,\n        "totalPages": 10,\n        "hasNext": true,\n        "hasPrevious": false\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "status": 400,\n    "message": "Validation failed",\n    "errors": [\n        {\n            "field": "email",\n            "message": "Email domain is not allowed"\n        }\n    ]\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"testing-standards",children:"Testing Standards"}),"\n",(0,a.jsx)(n.h3,{id:"unit-test-standards",children:"Unit Test Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass TranslationServiceTest {\n    \n    @Mock\n    private ExternalTranslationApi translationApi;\n    \n    private TranslationService translationService;\n    \n    @BeforeEach\n    void setUp() {\n        translationService = new TranslationServiceImpl(translationApi);\n    }\n    \n    @Test\n    void translateJsonNode_WithObjectNode_ShouldTranslateAllTextFields() {\n        // Given\n        ObjectNode originalNode = objectMapper.createObjectNode();\n        originalNode.put("name", "John Doe");\n        originalNode.put("description", "Software Engineer");\n        \n        // When\n        JsonNode result = translationService.translateJsonNode(originalNode, "en", "vi");\n        \n        // Then\n        assertThat(result.get("description").asText()).isEqualTo("K\u1ef9 s\u01b0 ph\u1ea7n m\u1ec1m");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"test-naming",children:"Test Naming"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use descriptive test names: ",(0,a.jsx)(n.code,{children:"methodName_WithCondition_ShouldExpectedBehavior"})]}),"\n",(0,a.jsx)(n.li,{children:"Group related tests in nested classes"}),"\n",(0,a.jsx)(n.li,{children:"Use meaningful test data"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"documentation-standards",children:"Documentation Standards"}),"\n",(0,a.jsx)(n.h3,{id:"code-comments",children:"Code Comments"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"/**\n * Creates a new student in the system with full validation.\n * \n * @param request Student creation request containing all required fields\n * @return Created student with generated ID and timestamps\n * @throws ValidationException if request data is invalid\n * @throws BusinessException if business rules are violated\n */\npublic StudentResponse createStudent(CreateStudentRequest request) {\n    // Implementation\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"api-documentation",children:"API Documentation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use comprehensive Swagger/OpenAPI documentation"}),"\n",(0,a.jsx)(n.li,{children:"Include request/response examples"}),"\n",(0,a.jsx)(n.li,{children:"Document all validation rules"}),"\n",(0,a.jsx)(n.li,{children:"Provide usage examples"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"readme-standards",children:"README Standards"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Include setup instructions"}),"\n",(0,a.jsx)(n.li,{children:"Document system requirements"}),"\n",(0,a.jsx)(n.li,{children:"Provide usage examples"}),"\n",(0,a.jsx)(n.li,{children:"Include project structure overview"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"translation-and-internationalization",children:"Translation and Internationalization"}),"\n",(0,a.jsx)(n.h3,{id:"translation-helper-standards",children:"Translation Helper Standards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Use type-safe translation helpers\nexport async function translateResponse<T extends object>(\n    data: T,\n    typeName: string\n): Promise<T> {\n    const locale = Cookies.get('NEXT_LOCALE') || 'vi';\n    if (locale !== 'en') return data;\n    \n    const fieldsToTranslate = getTranslatableFields(typeName);\n    const result = { ...data };\n    \n    for (const key of fieldsToTranslate) {\n        const value = (data as any)[key];\n        if (typeof value === 'string') {\n            const translated = await translateText(value, 'vi', 'en');\n            (result as any)[key] = translated;\n        }\n    }\n    \n    return result;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"translation-service-standards",children:"Translation Service Standards"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Cache translations to avoid repeated API calls"}),"\n",(0,a.jsx)(n.li,{children:"Handle translation failures gracefully"}),"\n",(0,a.jsx)(n.li,{children:"Support bidirectional translation (vi \u2194 en)"}),"\n",(0,a.jsx)(n.li,{children:"Use consistent field mapping for different entity types"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consistency"}),": Follow established patterns across the codebase"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Type Safety"}),": Use TypeScript interfaces and Java generics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Error Handling"}),": Implement comprehensive error handling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance"}),": Consider caching, pagination, and lazy loading"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Security"}),": Validate all inputs and use proper authentication"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Maintainability"}),": Write clean, well-documented code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Testing"}),": Maintain good test coverage"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Internationalization"}),": Support multiple languages properly"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"These coding standards should be followed by all team members to ensure consistency, maintainability, and quality across the Student Management System codebase."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);