"use strict";(self.webpackChunkhhkt_docs_tkpm=self.webpackChunkhhkt_docs_tkpm||[]).push([[6622],{67:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"developer-guide/data-validation","title":"Data Validation","description":"Introduction","source":"@site/docs/developer-guide/data-validation.md","sourceDirName":"developer-guide","slug":"/developer-guide/data-validation","permalink":"/docs/developer-guide/data-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/hhkt-tkpm/hhkt-tkpm.github.io/tree/main/docs/developer-guide/data-validation.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Inversion of Control and Dependency Injection","permalink":"/docs/developer-guide/inversion-of-control-and-dependency-injection"},"next":{"title":"Student Management System Database","permalink":"/docs/developer-guide/database-schema"}}');var t=a(4848),s=a(8453);const r={sidebar_position:4},l="Data Validation",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Validation Architecture",id:"validation-architecture",level:2},{value:"Multi-Layer Validation Strategy",id:"multi-layer-validation-strategy",level:3},{value:"Validation Flow Diagram",id:"validation-flow-diagram",level:3},{value:"Jakarta Bean Validation",id:"jakarta-bean-validation",level:2},{value:"Core Validation Annotations",id:"core-validation-annotations",level:3},{value:"Request DTO Validation",id:"request-dto-validation",level:3},{value:"Controller-Level Validation",id:"controller-level-validation",level:3},{value:"Custom Validation",id:"custom-validation",level:2},{value:"Custom Annotation Creation",id:"custom-annotation-creation",level:3},{value:"Custom Validator Implementation",id:"custom-validator-implementation",level:3},{value:"Usage in Request DTOs",id:"usage-in-request-dtos",level:3},{value:"Service Layer Validation",id:"service-layer-validation",level:2},{value:"Business Logic Validation",id:"business-logic-validation",level:3},{value:"Complex Business Validation",id:"complex-business-validation",level:3},{value:"Error Handling and Response",id:"error-handling-and-response",level:2},{value:"Validation Error Structure",id:"validation-error-structure",level:3},{value:"Database-Level Validation",id:"database-level-validation",level:2},{value:"Entity Constraints",id:"entity-constraints",level:3},{value:"Database Migration Constraints",id:"database-migration-constraints",level:3},{value:"Validation Patterns by Entity",id:"validation-patterns-by-entity",level:2},{value:"Student Validation",id:"student-validation",level:3},{value:"Registration Validation",id:"registration-validation",level:3},{value:"Testing Validation Logic",id:"testing-validation-logic",level:2},{value:"Unit Testing Validators",id:"unit-testing-validators",level:3},{value:"Controller Testing with Invalid Data",id:"controller-testing-with-invalid-data",level:3},{value:"Migration and Upgrade Path",id:"migration-and-upgrade-path",level:2},{value:"Jakarta Migration (JSR-303 to Jakarta)",id:"jakarta-migration-jsr-303-to-jakarta",level:3},{value:"Validation Framework Updates",id:"validation-framework-updates",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"data-validation",children:"Data Validation"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Data validation is a critical aspect of the Student Management System that ensures data integrity, security, and business rule compliance. This document covers the comprehensive validation strategy implemented using Jakarta Bean Validation (formerly JSR-303) and custom validation logic."}),"\n",(0,t.jsx)(n.h2,{id:"validation-architecture",children:"Validation Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"multi-layer-validation-strategy",children:"Multi-Layer Validation Strategy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Client-Side Validation       \u2502\n\u2502         (Frontend - Optional)       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       Controller Validation         \u2502\n\u2502      (Request DTO Validation)       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        Service Validation           \u2502\n\u2502     (Business Logic Validation)     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       Database Validation           \u2502\n\u2502      (Constraints & Triggers)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"validation-flow-diagram",children:"Validation Flow Diagram"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[DIAGRAM_PLACEHOLDER_VALIDATION_FLOW]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"jakarta-bean-validation",children:"Jakarta Bean Validation"}),"\n",(0,t.jsx)(n.h3,{id:"core-validation-annotations",children:"Core Validation Annotations"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Annotation"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Usage"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@NotNull"})}),(0,t.jsx)(n.td,{children:"Null check"}),(0,t.jsx)(n.td,{children:"Required fields"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@NotBlank"})}),(0,t.jsx)(n.td,{children:"Null, empty, whitespace check"}),(0,t.jsx)(n.td,{children:"String fields"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@NotEmpty"})}),(0,t.jsx)(n.td,{children:"Null and empty check"}),(0,t.jsx)(n.td,{children:"Collections, arrays"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Size"})}),(0,t.jsx)(n.td,{children:"Length constraints"}),(0,t.jsx)(n.td,{children:"Strings, collections"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Min/@Max"})}),(0,t.jsx)(n.td,{children:"Numeric range validation"}),(0,t.jsx)(n.td,{children:"Numbers"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Email"})}),(0,t.jsx)(n.td,{children:"Email format validation"}),(0,t.jsx)(n.td,{children:"Email fields"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Pattern"})}),(0,t.jsx)(n.td,{children:"Regex pattern matching"}),(0,t.jsx)(n.td,{children:"Custom formats"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Valid"})}),(0,t.jsx)(n.td,{children:"Nested object validation"}),(0,t.jsx)(n.td,{children:"Complex objects"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"request-dto-validation",children:"Request DTO Validation"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example from ProgramRequest:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Getter\n@Setter\n@Builder\npublic class ProgramRequest {\n    @NotBlank(message = "Program name is required")\n    private String programName;\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Extended Example for Student Registration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class StudentRequest {\n    @NotNull(message = "Student id is required")\n    private String studentId;\n\n    @NotBlank(message = "Full name is required")\n    private String fullName;\n\n    @NotNull(message = "Date of birth is required")\n    private LocalDate dob;\n\n    @NotBlank(message = "Gender is required")\n    private String gender;\n\n    @NotBlank(message = "Intake is required")\n    private String intake;\n\n    @NotBlank(message = "Email is required")\n    @Email(message = "Email should be valid")\n    @EmailDomain\n    private String email;\n\n    @NotBlank(message = "Phone country is required")\n    private String phoneCountry;\n\n    @NotBlank(message = "Phone number is required")\n    private String phone;\n\n    @NotBlank(message = "Nationality is required")\n    private String nationality;\n\n    @NotNull(message = "Faculty id is required")\n    private Integer facultyId;\n\n    @NotNull(message = "Program id is required")\n    private Integer programId;\n\n    @NotNull(message = "Student status id is required")\n    private Integer studentStatusId;\n\n    private List<AddressRequest> addresses;\n\n    private List<DocumentRequest> documents;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"controller-level-validation",children:"Controller-Level Validation"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implementation in ProgramController:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@PostMapping("")\npublic APIResponse addProgram(@RequestBody @Valid ProgramRequest request) {\n    log.info("Received request to add program: {}", request.getProgramName());\n    \n    ProgramResponse program = programService.addProgram(request);\n    \n    return APIResponse.builder()\n            .status(HttpStatus.CREATED.value())\n            .message("Success")\n            .data(program)\n            .build();\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Points:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@Valid"})," annotation triggers validation"]}),"\n",(0,t.jsx)(n.li,{children:"Validation occurs before method execution"}),"\n",(0,t.jsx)(n.li,{children:"Automatic error response generation for validation failures"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"custom-validation",children:"Custom Validation"}),"\n",(0,t.jsx)(n.h3,{id:"custom-annotation-creation",children:"Custom Annotation Creation"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"EmailDomain Annotation:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Constraint(validatedBy = EmailDomainValidator.class)\n@Target({ElementType.FIELD, ElementType.PARAMETER})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface EmailDomain {\n    String message() default "Invalid email domain";\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-validator-implementation",children:"Custom Validator Implementation"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"EmailDomainValidator:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Component\npublic class EmailDomainValidator implements ConstraintValidator<EmailDomain, String> {\n\n    private final IEmailDomainRepository emailDomainRepository;\n\n    @Autowired\n    public EmailDomainValidator(IEmailDomainRepository emailDomainRepository) {\n        this.emailDomainRepository = emailDomainRepository;\n    }\n\n    @Override\n    public boolean isValid(String email, ConstraintValidatorContext context) {\n        if (email == null) {\n            return true; // Let @NotNull handle null validation\n        }\n\n        String domain = email.substring(email.indexOf('@') + 1);\n        \n        List<org.example.backend.domain.EmailDomain> allowedDomains = \n            emailDomainRepository.findAll();\n\n        return allowedDomains.stream()\n                .anyMatch(allowedDomain -> domain.equals(allowedDomain.getDomain()));\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"usage-in-request-dtos",children:"Usage in Request DTOs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"[CODE_PLACEHOLDER_CUSTOM_VALIDATION_USAGE]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"service-layer-validation",children:"Service Layer Validation"}),"\n",(0,t.jsx)(n.h3,{id:"business-logic-validation",children:"Business Logic Validation"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example from ProgramServiceImpl:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Override\npublic ProgramResponse addProgram(ProgramRequest request) {\n    // Business rule validation\n    if (programRepository.findByProgramName(request.getProgramName()).isPresent()) {\n        log.error("Program already exists");\n        throw new RuntimeException("Program already exists");\n    }\n\n    Program program = ProgramMapper.mapToDomain(request);\n    program = programRepository.save(program);\n\n    log.info("Program saved to database successfully");\n    return ProgramMapper.mapToResponse(program);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"complex-business-validation",children:"Complex Business Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Override\n@Transactional\npublic ClassRegistrationResponse addClassRegistration(ClassRegistrationRequest classRegistrationRequest) {\n\n    log.info("add class registration with request: {}", classRegistrationRequest);\n\n    ClassRegistration classRegistration = ClassRegistrationMapper.mapFromClassRegistrationRequestToDomain(classRegistrationRequest);\n\n    log.info("check if class exists");\n    Class aClass = classRepository.findById(classRegistrationRequest.getClassId())\n            .orElseThrow(() -> {\n                log.error("Class not found");\n                return new RuntimeException("Class not found");\n            });\n\n    log.info("check if the course of the class is active");\n    if (!aClass.getCourse().getIsActive()) {\n        log.error("Course of the class is not active");\n        throw new RuntimeException("Course of the class is not active");\n    }\n\n    log.info("check if max students reached");\n    if (aClass.getClassRegistrations().size() >= aClass.getMaxStudents()) {\n        log.error("Max students reached");\n        throw new RuntimeException("Max students reached");\n    }\n\n    log.info("check if student exists");\n    Student student = studentRepository.findById(classRegistrationRequest.getStudentId())\n            .orElseThrow(() -> {\n                log.error("Student not found");\n                return new RuntimeException("Student not found");\n            });\n\n    log.info("set class and student");\n    classRegistration.setAClass(aClass);\n    classRegistration.setStudent(student);\n    classRegistration = classRegistrationRepository.save(classRegistration);\n\n    log.info("class registration created successfully");\n\n    // Add the registration history\n    log.info("Add class registration history");\n    ClassRegistrationHistoryRequest classRegistrationHistoryRequest = ClassRegistrationHistoryMapper.mapFromClassRegistrationDomainToClassRegistrationHistoryRequest(classRegistration);\n    classRegistrationHistoryRequest.setReason("Class registration created");\n\n    classRegistrationHistoryService.addClassRegistrationHistory(classRegistrationHistoryRequest);\n    log.info("class registration history added successfully");\n\n    return ClassRegistrationMapper.mapFromDomainToClassRegistrationResponse(classRegistration);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-and-response",children:"Error Handling and Response"}),"\n",(0,t.jsx)(n.h3,{id:"validation-error-structure",children:"Validation Error Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "status": 400,\n  "message": "Validation failed",\n  "errors": [\n    {\n      "field": "programName",\n      "message": "Program name is required",\n      "rejectedValue": null\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"database-level-validation",children:"Database-Level Validation"}),"\n",(0,t.jsx)(n.h3,{id:"entity-constraints",children:"Entity Constraints"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Program Entity with Constraints:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "programs")\npublic class Program extends Auditable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    @Column(name = "program_name", nullable = false, unique = true, length = 100)\n    private String programName;\n    \n    // Additional constraints\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"database-migration-constraints",children:"Database Migration Constraints"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE addresses\n    ADD CONSTRAINT addresses_address_type_check\n    CHECK (address_type IN ('Th\u01b0\u1eddng Tr\xfa', 'T\u1ea1m Tr\xfa', 'Nh\u1eadn Th\u01b0'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"validation-patterns-by-entity",children:"Validation Patterns by Entity"}),"\n",(0,t.jsx)(n.h3,{id:"student-validation",children:"Student Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Student extends Auditable {\n    @Id\n    @Column(name = "student_id", length = 10)\n    private String studentId;\n\n    @Column(name = "full_name", nullable = false)\n    private String fullName;\n\n    @Column(name = "dob", nullable = false)\n    private LocalDate dob;\n\n    @Column(name = "gender", nullable = false)\n    private String gender;\n\n    // Additional fields with validation\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"registration-validation",children:"Registration Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class ClassRegistration extends Auditable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    @Column(name = "status", nullable = false)\n    @Enumerated(EnumType.STRING)\n    private RegistrationStatus status;\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testing-validation-logic",children:"Testing Validation Logic"}),"\n",(0,t.jsx)(n.h3,{id:"unit-testing-validators",children:"Unit Testing Validators"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\npublic class EmailDomainValidatorTest {\n\n    @Test\n    public void shouldReturnFalseWhenDomainIsNotAllowed() {\n        List<EmailDomain> allowedDomains = Arrays.asList(\n                createEmailDomain("gmail.com"),\n                createEmailDomain("yahoo.com"),\n                createEmailDomain("hotmail.com")\n        );\n\n        when(emailDomainRepository.findAll()).thenReturn(allowedDomains);\n\n        assertFalse(validator.isValid("test@outlook.com", context));\n        assertFalse(validator.isValid("user@example.com", context));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"controller-testing-with-invalid-data",children:"Controller Testing with Invalid Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\npublic void givenProgramIdNotFound_whenGetProgramById_shouldThrowException() {\n    when(programRepository.findById(1)).thenReturn(Optional.empty());\n\n    RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n        programService.getProgramById(1);\n    });\n\n    assertThat(exception.getMessage()).isEqualTo("Program not found");\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"migration-and-upgrade-path",children:"Migration and Upgrade Path"}),"\n",(0,t.jsx)(n.h3,{id:"jakarta-migration-jsr-303-to-jakarta",children:"Jakarta Migration (JSR-303 to Jakarta)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Old (JSR-303)\nimport javax.validation.constraints.NotBlank;\n\n// New (Jakarta)\nimport jakarta.validation.constraints.NotBlank;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"validation-framework-updates",children:"Validation Framework Updates"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Bean Validation specification changes"}),"\n",(0,t.jsx)(n.li,{children:"Custom validator compatibility"}),"\n",(0,t.jsx)(n.li,{children:"Message interpolation updates"}),"\n",(0,t.jsx)(n.li,{children:"Performance improvements"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"This comprehensive guide covers all aspects of data validation in the Student Management System. For implementation details and examples, refer to the source code in the respective packages and the accompanying test cases."})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var i=a(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);