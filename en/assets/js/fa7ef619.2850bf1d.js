"use strict";(self.webpackChunkhhkt_docs_tkpm=self.webpackChunkhhkt_docs_tkpm||[]).push([[9414],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},8683:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"developer-guide/updating-existing-entity","title":"Updating Existing Entities - Adding New Properties","description":"This guide explains how to add new properties to existing entities in the HHKT-Ex-TKPM Spring Boot application. We\'ll use the Student entity as an example, but the same principles apply to other entities like Course, Class, Program, etc.","source":"@site/docs/developer-guide/updating-existing-entity.md","sourceDirName":"developer-guide","slug":"/developer-guide/updating-existing-entity","permalink":"/en/docs/developer-guide/updating-existing-entity","draft":false,"unlisted":false,"editUrl":"https://github.com/hhkt-tkpm/hhkt-tkpm.github.io/tree/main/docs/developer-guide/updating-existing-entity.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcda API Documentation","permalink":"/en/docs/developer-guide/webapi-documentation"}}');var i=t(4848),r=t(8453);const a={sidebar_position:8},d="Updating Existing Entities - Adding New Properties",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"1. Update the Domain Entity",id:"1-update-the-domain-entity",level:3},{value:"2. Update Database Schema",id:"2-update-database-schema",level:3},{value:"3. Update Data Transfer Objects (DTOs)",id:"3-update-data-transfer-objects-dtos",level:3},{value:"4. Update Mapper Classes",id:"4-update-mapper-classes",level:3},{value:"5. Update Service Layer",id:"5-update-service-layer",level:3},{value:"6. Update Validation (Optional)",id:"6-update-validation-optional",level:3},{value:"7. Update Frontend (Client-side)",id:"7-update-frontend-client-side",level:3},{value:"Testing Your Changes",id:"testing-your-changes",level:2},{value:"1. Unit Tests",id:"1-unit-tests",level:3},{value:"2. Integration Tests",id:"2-integration-tests",level:3},{value:"3. Manual Testing",id:"3-manual-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Database Considerations",id:"1-database-considerations",level:3},{value:"2. Validation",id:"2-validation",level:3},{value:"3. Documentation",id:"3-documentation",level:3},{value:"4. Backward Compatibility",id:"4-backward-compatibility",level:3},{value:"Common Issues and Troubleshooting",id:"common-issues-and-troubleshooting",level:2},{value:"Database Migration Issues",id:"database-migration-issues",level:3},{value:"Validation Errors",id:"validation-errors",level:3},{value:"Mapping Issues",id:"mapping-issues",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"updating-existing-entities---adding-new-properties",children:"Updating Existing Entities - Adding New Properties"})}),"\n",(0,i.jsxs)(n.p,{children:["This guide explains how to add new properties to existing entities in the HHKT-Ex-TKPM Spring Boot application. We'll use the ",(0,i.jsx)(n.code,{children:"Student"})," entity as an example, but the same principles apply to other entities like ",(0,i.jsx)(n.code,{children:"Course"}),", ",(0,i.jsx)(n.code,{children:"Class"}),", ",(0,i.jsx)(n.code,{children:"Program"}),", etc."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The HHKT-Ex-TKPM system follows a layered architecture with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Domain Layer"}),": JPA entities with database mappings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DTO Layer"}),": Data Transfer Objects for API communication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Layer"}),": Business logic implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Controller Layer"}),": REST API endpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Repository Layer"}),": Data access layer"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-guide",children:"Step-by-Step Guide"}),"\n",(0,i.jsx)(n.h3,{id:"1-update-the-domain-entity",children:"1. Update the Domain Entity"}),"\n",(0,i.jsxs)(n.p,{children:["Navigate to ",(0,i.jsx)(n.code,{children:"server/src/main/java/org/example/backend/domain/"})," and update your entity class."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Example: Adding ",(0,i.jsx)(n.code,{children:"phoneNumber"})," property to Student entity"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "students")\npublic class Student {\n    // ... existing properties\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = "student_code")\n    private String studentCode;\n\n    @Column(name = "full_name")\n    private String fullName;\n\n    // NEW PROPERTY - Add this\n    @Column(name = "phone_number", length = 15)\n    private String phoneNumber;\n\n    // ... existing properties\n\n    // Add getter and setter for new property\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n\n    // ... existing getters and setters\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Important Considerations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use appropriate JPA annotations (",(0,i.jsx)(n.code,{children:"@Column"}),", ",(0,i.jsx)(n.code,{children:"@NotNull"}),", etc.)"]}),"\n",(0,i.jsx)(n.li,{children:"Choose proper data types and constraints"}),"\n",(0,i.jsx)(n.li,{children:"Follow naming conventions (camelCase for Java, snake_case for database)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-update-database-schema",children:"2. Update Database Schema"}),"\n",(0,i.jsxs)(n.p,{children:["Create or update migration files in ",(0,i.jsx)(n.code,{children:"server/src/main/resources/db/"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Create a new migration file (e.g., ",(0,i.jsx)(n.code,{children:"V2__add_phone_number_to_students.sql"}),"):"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Add new column to existing table\nALTER TABLE students\nADD COLUMN phone_number VARCHAR(15);\n\n-- Add index if needed for performance\nCREATE INDEX idx_students_phone_number ON students(phone_number);\n\n-- Add constraints if required\n-- ALTER TABLE students ADD CONSTRAINT chk_phone_number_format\n-- CHECK (phone_number REGEXP '^[0-9+\\-\\s()]+$');\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alternative: Update existing schema file if in development:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- In your main schema file\nCREATE TABLE students (\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    student_code VARCHAR(20) NOT NULL UNIQUE,\n    full_name VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15), -- Add this line\n    -- ... other columns\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-update-data-transfer-objects-dtos",children:"3. Update Data Transfer Objects (DTOs)"}),"\n",(0,i.jsxs)(n.p,{children:["Update the relevant DTO classes in ",(0,i.jsx)(n.code,{children:"server/src/main/java/org/example/backend/dto/"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Update Request DTO (",(0,i.jsx)(n.code,{children:"dto/request/StudentUpdateRequest.java"}),"):"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class StudentUpdateRequest {\n    // ... existing fields\n\n    private String fullName;\n    private String email;\n\n    // NEW FIELD - Add this\n    @Size(max = 15, message = "Phone number must not exceed 15 characters")\n    @Pattern(regexp = "^[0-9+\\\\-\\\\s()]*$", message = "Invalid phone number format")\n    private String phoneNumber;\n\n    // ... existing fields\n\n    // Add getter and setter\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n\n    // ... existing getters and setters\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Update Response DTO (",(0,i.jsx)(n.code,{children:"dto/response/StudentResponse.java"}),"):"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class StudentResponse {\n    // ... existing fields\n\n    private Long id;\n    private String studentCode;\n    private String fullName;\n\n    // NEW FIELD - Add this\n    private String phoneNumber;\n\n    // ... existing fields\n\n    // Add getter and setter\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n\n    // ... existing getters and setters\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-update-mapper-classes",children:"4. Update Mapper Classes"}),"\n",(0,i.jsxs)(n.p,{children:["Update the mapper in ",(0,i.jsx)(n.code,{children:"server/src/main/java/org/example/backend/mapper/"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Update StudentMapper:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Component\npublic class StudentMapper {\n\n    public StudentResponse toResponse(Student student) {\n        StudentResponse response = new StudentResponse();\n        response.setId(student.getId());\n        response.setStudentCode(student.getStudentCode());\n        response.setFullName(student.getFullName());\n        // NEW MAPPING - Add this\n        response.setPhoneNumber(student.getPhoneNumber());\n        // ... other mappings\n        return response;\n    }\n\n    public Student toEntity(StudentCreateRequest request) {\n        Student student = new Student();\n        student.setStudentCode(request.getStudentCode());\n        student.setFullName(request.getFullName());\n        // NEW MAPPING - Add this\n        student.setPhoneNumber(request.getPhoneNumber());\n        // ... other mappings\n        return student;\n    }\n\n    // ... other mapping methods\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-update-service-layer",children:"5. Update Service Layer"}),"\n",(0,i.jsxs)(n.p,{children:["Update the service implementation in ",(0,i.jsx)(n.code,{children:"server/src/main/java/org/example/backend/service/impl/"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Update StudentServiceImpl:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\n@Transactional\npublic class StudentServiceImpl implements StudentService {\n\n    // ... existing methods\n\n    @Override\n    public StudentResponse updateStudent(Long id, StudentUpdateRequest request) {\n        Student student = studentRepository.findById(id)\n            .orElseThrow(() -> new EntityNotFoundException("Student not found with id: " + id));\n\n        // Update existing properties\n        Optional.ofNullable(request.getFullName()).ifPresent(student::setFullName);\n        Optional.ofNullable(request.getEmail()).ifPresent(student::setEmail);\n\n        // NEW PROPERTY UPDATE - Add this\n        Optional.ofNullable(request.getPhoneNumber()).ifPresent(student::setPhoneNumber);\n\n        // ... update other properties\n\n        Student savedStudent = studentRepository.save(student);\n        return studentMapper.toResponse(savedStudent);\n    }\n\n    // ... other methods\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"6-update-validation-optional",children:"6. Update Validation (Optional)"}),"\n",(0,i.jsxs)(n.p,{children:["Add custom validation if needed in ",(0,i.jsx)(n.code,{children:"server/src/main/java/org/example/backend/validator/"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Create PhoneNumberValidator (if complex validation needed):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Component\npublic class PhoneNumberValidator {\n\n    public boolean isValid(String phoneNumber) {\n        if (phoneNumber == null || phoneNumber.trim().isEmpty()) {\n            return true; // Allow null/empty if not required\n        }\n\n        // Custom validation logic\n        return phoneNumber.matches("^[0-9+\\\\-\\\\s()]{7,15}$");\n    }\n\n    public String sanitize(String phoneNumber) {\n        return phoneNumber != null ? phoneNumber.trim() : null;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"7-update-frontend-client-side",children:"7. Update Frontend (Client-side)"}),"\n",(0,i.jsxs)(n.p,{children:["Update the React/NextJS components in ",(0,i.jsx)(n.code,{children:"client/src/"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Update Student Interface (",(0,i.jsx)(n.code,{children:"interfaces/Student.ts"}),"):"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface Student {\n  id: number;\n  studentCode: string;\n  fullName: string;\n  phoneNumber?: string; // Add this field\n  // ... other properties\n}\n\nexport interface StudentUpdateRequest {\n  fullName?: string;\n  email?: string;\n  phoneNumber?: string; // Add this field\n  // ... other properties\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Update Student Form Component:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// In your student form component\n<div className="form-group">\n  <label htmlFor="phoneNumber">Phone Number</label>\n  <input\n    type="tel"\n    id="phoneNumber"\n    name="phoneNumber"\n    value={formData.phoneNumber || ""}\n    onChange={handleInputChange}\n    placeholder="Enter phone number"\n    maxLength={15}\n  />\n</div>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-your-changes",children:"Testing Your Changes"}),"\n",(0,i.jsx)(n.h3,{id:"1-unit-tests",children:"1. Unit Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Create/update unit tests in ",(0,i.jsx)(n.code,{children:"server/src/test/java/org/example/backend/"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass StudentServiceImplTest {\n\n    @Test\n    void shouldUpdateStudentPhoneNumber() {\n        // Given\n        Student existingStudent = new Student();\n        existingStudent.setId(1L);\n        existingStudent.setPhoneNumber("123456789");\n\n        StudentUpdateRequest request = new StudentUpdateRequest();\n        request.setPhoneNumber("987654321");\n\n        when(studentRepository.findById(1L)).thenReturn(Optional.of(existingStudent));\n        when(studentRepository.save(any(Student.class))).thenReturn(existingStudent);\n\n        // When\n        StudentResponse response = studentService.updateStudent(1L, request);\n\n        // Then\n        assertEquals("987654321", response.getPhoneNumber());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-integration-tests",children:"2. Integration Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test your API endpoints:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@SpringBootTest\n@AutoConfigureTestDatabase\nclass StudentControllerIntegrationTest {\n\n    @Test\n    void shouldUpdateStudentWithPhoneNumber() {\n        // Create test data and verify API response includes new field\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-manual-testing",children:"3. Manual Testing"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run the application:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd server\ndocker-compose up -d\n./mvnw spring-boot:run\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test via Swagger UI:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Navigate to ",(0,i.jsx)(n.code,{children:"http://localhost:9000/swagger-ui.html"})]}),"\n",(0,i.jsx)(n.li,{children:"Test the update endpoint with the new field"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test via Postman:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'PUT /api/students/1\n{\n  "fullName": "Updated Name",\n  "phoneNumber": "123-456-7890"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-database-considerations",children:"1. Database Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always use migrations"})," for schema changes in production"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add indexes"})," for frequently queried fields"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider nullable vs non-null"})," constraints carefully"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use appropriate data types"})," and lengths"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-validation",children:"2. Validation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add proper validation"})," at DTO level"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sanitize input data"})," before saving"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Provide meaningful error messages"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-documentation",children:"3. Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Update API documentation"})," (Swagger annotations)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document business rules"})," for new fields"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Update user guides"})," if applicable"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-backward-compatibility",children:"4. Backward Compatibility"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Make new fields optional"})," to avoid breaking existing API consumers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Provide default values"})," where appropriate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version your APIs"})," if making breaking changes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-issues-and-troubleshooting",children:"Common Issues and Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"database-migration-issues",children:"Database Migration Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# If migration fails, check:\n1. Database connection\n2. Migration file syntax\n3. Existing data conflicts\n4. Permission issues\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validation-errors",children:"Validation Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Common validation annotations\n@NotNull(message = "Field is required")\n@Size(min = 1, max = 50, message = "Length must be between 1 and 50")\n@Pattern(regexp = "pattern", message = "Invalid format")\n@Email(message = "Invalid email format")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mapping-issues",children:"Mapping Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Ensure all fields are mapped in both directions\n// Entity -> DTO\n// DTO -> Entity\n// Check for null handling\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Following this guide ensures that your new properties are properly integrated across all layers of the HHKT-Ex-TKPM application. Remember to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Update the domain entity"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Create database migration"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Update DTOs and validation"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Update service layer logic"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Update mappers"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Update frontend interfaces"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Write tests"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Test thoroughly"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This systematic approach maintains code quality and ensures your new features work correctly across the entire application stack."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);